{
  "$root": {
    "assets": [
      {
        "name": "paintBoard",
        "url": "./scenes/assets/paintBoard.jpg"
      },
      {
        "name": "paintBoardBlack",
        "url": "./scenes/assets/paintBoardBlack.jpg"
      },
      {
        "name": "paintBoardWhite",
        "url": "./scenes/assets/paintBoardWhite.jpg"
      },
      {
        "name": "sceneMainMenu",
        "url": "./scenes/assets/sceneMainMenu.jpg"
      },
      {
        "name": "sceneTemplate",
        "url": "./scenes/assets/sceneTemplate.jpg"
      },
      {
        "name": "sys4SecAlarm",
        "url": "./scenes/assets/sys4SecAlarm.mp3"
      },
      {
        "name": "sys4SecTempo",
        "url": "./scenes/assets/sys4SecTempo.mp3"
      },
      {
        "name": "sys4SecTrans",
        "url": "./scenes/assets/sys4SecTrans.mp3"
      },
      {
        "name": "sysAttention",
        "url": "./scenes/assets/sysAttention.mp3"
      },
      {
        "name": "sysErrorFast",
        "url": "./scenes/assets/sysErrorFast.mp3"
      },
      {
        "name": "sysErrorLong",
        "url": "./scenes/assets/sysErrorLong.mp3"
      },
      {
        "name": "sysFlipPages",
        "url": "./scenes/assets/sysFlipPages.mp3"
      },
      {
        "name": "sysHeardBeat",
        "url": "./scenes/assets/sysHeardBeat.mp3"
      },
      {
        "name": "sysMetronome",
        "url": "./scenes/assets/sysMetronome.mp3"
      },
      {
        "name": "sysOkMystery",
        "url": "./scenes/assets/sysOkMystery.mp3"
      },
      {
        "name": "sysOkRinging",
        "url": "./scenes/assets/sysOkRinging.mp3"
      },
      {
        "name": "sysOpenStory",
        "url": "./scenes/assets/sysOpenStory.mp3"
      },
      {
        "name": "sysRecharges",
        "url": "./scenes/assets/sysRecharges.mp3"
      },
      {
        "name": "sysTypeWrite",
        "url": "./scenes/assets/sysTypeWrite.mp3"
      }
    ],
    "$init": [
      {
        "dialog-box": true,
        "status-bar": true,
        "hands": false,
        "next": true
      },
      {
        "$": "Мороз и <font color=\"magenta\">солнце</font> день чудесный! Мороз и <font color=\"magenta\">солнце</font> день чудесный! Мороз и <font color=\"magenta\">солнце</font> день чудесный! Мороз и <font color=\"magenta\">солнце</font> день чудесный!"
      },
      {
        "scene": "sceneTemplate"
      },
      {
        "al": "Еще ты дремлешь, друг прелестный"
      },
      {
        "$": "Пора, красавица, проснись"
      },
      {
        "$": "Открой сомкнуты негой взоры"
      },
      {
        "$": "Навстречу северной Авроры"
      },
      {
        "jump": "$init"
      }
    ],
    "characters": [
      {
        "id": "$",
        "name": ". . . .",
        "nameColor": "#49de58",
        "replyColor": "#a4deaa",
        "avatar": "sceneMainMenu"
      },
      {
        "id": "al",
        "name": "Алиса",
        "nameColor": "magenta",
        "replyColor": "crimson"
      }
    ],
    "data": {
      "a.yaml": "\"- test\\r\\n\\r\\n- aa:\\r\\n    test: 1234\\r\\n    test2: true\"",
      "app.lua": "\"\\r\\n    local function getAdapter(mData, changeColor, getItemCountFunc, getTouchHelperFunc)\\r\\n        return LuaRecyclerAdapter(luajava.createProxy('androlua.adapter.LuaRecyclerAdapter$AdapterCreator', {\\r\\n            getItemCount = getItemCountFunc,\\r\\n            getItemViewType = function(position) return 0 end,\\r\\n            onCreateViewHolder = function(parent, viewType)\\r\\n                local views = {}\\r\\n                local holder = LuaRecyclerHolder(loadlayout(item_view, views, RecyclerView))\\r\\n                holder.itemView.setTag(views)\\r\\n                holder.itemView.getLayoutParams().width = ids.recyclerView.getWidth() / 5 - 1\\r\\n                holder.itemView.setOnTouchListener(luajava.createProxy('android.view.View$OnTouchListener', {\\r\\n                    onTouch = function(v, event)\\r\\n                        if isDragging and MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN then\\r\\n                            getTouchHelperFunc().startDrag(holder)\\r\\n                        end\\r\\n                        return false\\r\\n                    end\\r\\n                }))\\r\\n                holder.itemView.setOnLongClickListener(luajava.createProxy('android.view.View$OnLongClickListener', {\\r\\n                    onLongClick = function(v)\\r\\n                        isDragging = true\\r\\n                        adapter.notifyDataSetChanged()\\r\\n                        return true\\r\\n                    end\\r\\n                }))\\r\\n                holder.itemView.onClick = function()\\r\\n                    local p = holder.getAdapterPosition() + 1\\r\\n                    local item = mData[p]\\r\\n                    newActivity(item.launchPage)\\r\\n                end\\r\\n                views.ic_del.onClick = function()\\r\\n                    local p = holder.getAdapterPosition()\\r\\n                    local id\\r\\n                    if p + 1 <= #data then\\r\\n                        id = data[p + 1].id\\r\\n                        table.remove(data, p + 1)\\r\\n                        adapter.notifyItemRemoved(p)\\r\\n                    end\\r\\n                    if id then FileUtils.removePlugin(id) end\\r\\n                end\\r\\n                return holder\\r\\n            end,\\r\\n            onBindViewHolder = function(holder, position)\\r\\n                position = position + 1\\r\\n                local views = holder.itemView.getTag()\\r\\n                local item = mData[position]\\r\\n                if views == nil or item == nil then return end\\r\\n                if isDragging then\\r\\n                    views.ic_del.setScaleX(0)\\r\\n                    views.ic_del.setScaleY(0)\\r\\n                    views.ic_del.setVisibility(0)\\r\\n                    views.ic_del.animate().scaleX(1).scaleY(1).start()\\r\\n                else\\r\\n                    views.ic_del.setVisibility(8)\\r\\n                end\\r\\n\\r\\n                local icon = item.icon\\r\\n                local radius = tonumber(config.home_icon_radius or '40')\\r\\n                LuaImageLoader.loadWithRadius(views.icon, radius, icon)\\r\\n                views.text.setText(item.text)\\r\\n                local alpha = tonumber(config.home_bg_alpha or 9)\\r\\n                if changeColor and alpha <= 5 then\\r\\n                    views.text.setTextColor(0xFFFFFFFF)\\r\\n                else\\r\\n                    views.text.setTextColor(0xFF444444)\\r\\n                end\\r\\n            end,\\r\\n        }))\\r\\n    end\\r\\n\\r\\n    local function getTouchHelperCallback(mData, mAdapter)\\r\\n        return DragTouchHelper(luajava.createProxy('pub.hanks.sample.adapter.DragTouchHelper$Creator', {\\r\\n            onMove = function(rec, holder, target)\\r\\n                local fromPosition = holder.getAdapterPosition() + 1\\r\\n                local toPosition = target.getAdapterPosition() + 1\\r\\n                local tmp = mData[fromPosition]\\r\\n                table.remove(mData, fromPosition)\\r\\n                table.insert(mData, toPosition, tmp)\\r\\n                mAdapter.notifyItemMoved(fromPosition - 1, toPosition - 1)\\r\\n            end,\\r\\n            isLongPressDragEnabled = function() return false end,\\r\\n            clearView = function(rec, holder)\\r\\n                local sortApps = {}\\r\\n                for i = 1, #mData do\\r\\n                    sortApps[#sortApps + 1] = mData[i].id\\r\\n                end\\r\\n                config.sortApps = sortApps\\r\\n                saveConfig(config)\\r\\n            end,\\r\\n            getDragFlags = function() return 0xF end,\\r\\n            getSwipeFlags = function() return 0 end,\\r\\n        }))\\r\\n    end\\r\\n\"",
      "style.css": "\".status-bar{\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  background: rgba(0,0,0,0.7);\\r\\n  color: gray;\\r\\n  width: 100%;\\r\\n  height: 4%;\\r\\n  z-index: 9999;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  padding: 5px 15px;\\r\\n  display: none;\\r\\n}\\r\\n.status-bar__status--ready,\\r\\n.status-bar__status--help{\\r\\n  display: inline-flex;\\r\\n  align-items: center;\\r\\n  cursor: pointer;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n.status-bar__status--ready span{\\r\\n  width: 15px;\\r\\n  height: 15px;\\r\\n  border-radius: 50%;\\r\\n  background-color: gray;\\r\\n  display: inline-block;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.status-bar__status--help span{\\r\\n  width: 15px;\\r\\n  height: 15px;\\r\\n  border-radius: 50%;\\r\\n  background-color: gray;\\r\\n  display: i gray;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.status-bar__status--ready.status-active span{\\r\\n    background-color: lightgreen;\\r\\n}\\r\\n.status-bar__status--ready.status-active {\\r\\n   color: white;\\r\\n}\\r\\n.status-bar__status--help.status-active span{\\r\\n    background-color: red;\\r\\n}\\r\\n.status-bar__status--help.status-active{\\r\\n  color: white;\\r\\n}\\r\\n/*\\r\\n.status-bar__item:hover{\\r\\n  color: white;\\r\\n}\\r\\n.status-bar__status--ready:hover span{\\r\\n    background-color: lightgreen;\\r\\n}\\r\\n.status-bar__status--help:hover span{\\r\\n    background-color: red;\\r\\n}\\r\\n*/\\r\\n\\r\\n.status-bar__image-containter{\\r\\n  position: absolute;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: contain;\\r\\n  top: 40px;\\r\\n  right: 0;\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n}\\r\\n.status-bar__player-name{\\r\\n  padding-left: 10px;\\r\\n}\\r\\n.status-bar__player{\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\"",
      "t.py": "\"class Person:\\r\\n  def __init__(mysillyobject, name, age):\\r\\n    mysillyobject.name = name\\r\\n    mysillyobject.age = age\\r\\n\\r\\n  def myfunc(abc):\\r\\n    print(\\\"Hello my name is \\\" + abc.name)\\r\\n\\r\\np1 = Person(\\\"John\\\", 36)\\r\\np1.myfunc()\"",
      "test.js": "\"\\r\\nvar express = require('express');\\r\\nvar app = express();\\r\\n\\r\\nvar requestTime = function (req, res, next) {\\r\\n  req.requestTime = Date.now();\\r\\n  next();\\r\\n};\\r\\n\\r\\napp.use(requestTime);\\r\\n\\r\\napp.get('/', function (req, res) {\\r\\n  var responseText = 'Hello World!';\\r\\n  responseText += 'Requested at: ' + req.requestTime + '';\\r\\n  res.send(responseText);\\r\\n});\\r\\n\\r\\napp.listen(3000);\\r\\n\\r\\n\""
    },
    "package": {
      "preload": true,
      "debug": true,
      "ISBN": 9781234567897,
      "chess": false,
      "paint-board": true,
      "crossword": false
    },
    "wiki": {
      "Абажур": "Колпак для лампы, светильника",
      "Баба-яга": "В русских сказках: злая старуха-колдунья",
      "Вагонетка": {
        "text": "Небольшой открытый вагон для перевозки грузов на узкоколейных или подвесных дорогах",
        "color": "lightgreen"
      },
      "Жабры": "Органы дыхания рыб и некоторых других водных животных",
      "Пагинация": "Нумерация страниц",
      "Хакасы": "Народ, составляющий основное коренное население Хакасии",
      "Юань": {
        "text": "Денежная единица в Китае",
        "color": "red"
      },
      "Явка": "Место, где происходят конспиративные встречи, а также сама такая встреча или условный знак при такой встрече"
    }
  }
}