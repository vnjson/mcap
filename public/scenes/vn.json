{
  "$root": {
    "assets": [
      {
        "name": "att",
        "url": "./scenes/assets/att.mp3"
      },
      {
        "name": "c10s",
        "url": "./scenes/assets/c10s.mp3"
      },
      {
        "name": "c30s",
        "url": "./scenes/assets/c30s.mp3"
      },
      {
        "name": "c4s",
        "url": "./scenes/assets/c4s.mp3"
      },
      {
        "name": "err1",
        "url": "./scenes/assets/err1.mp3"
      },
      {
        "name": "err2",
        "url": "./scenes/assets/err2.mp3"
      },
      {
        "name": "hr",
        "url": "./scenes/assets/hr.mp3"
      },
      {
        "name": "img1",
        "url": "./scenes/assets/img1.webp"
      },
      {
        "name": "img2",
        "url": "./scenes/assets/img2.jpg"
      },
      {
        "name": "m10s",
        "url": "./scenes/assets/m10s.mp3"
      },
      {
        "name": "m30s",
        "url": "./scenes/assets/m30s.mp3"
      },
      {
        "name": "m4s",
        "url": "./scenes/assets/m4s.mp3"
      },
      {
        "name": "mtf",
        "url": "./scenes/assets/mtf.mp3"
      },
      {
        "name": "mts",
        "url": "./scenes/assets/mts.mp3"
      },
      {
        "name": "ok1",
        "url": "./scenes/assets/ok1.mp3"
      },
      {
        "name": "ok2",
        "url": "./scenes/assets/ok2.mp3"
      },
      {
        "name": "on",
        "url": "./scenes/assets/on.mp3"
      },
      {
        "name": "pg",
        "url": "./scenes/assets/pg.mp3"
      },
      {
        "name": "qu",
        "url": "./scenes/assets/qu.mp3"
      },
      {
        "name": "t10s",
        "url": "./scenes/assets/t10s.mp3"
      },
      {
        "name": "t30s",
        "url": "./scenes/assets/t30s.mp3"
      },
      {
        "name": "t4s",
        "url": "./scenes/assets/t4s.mp3"
      },
      {
        "name": "tg",
        "url": "./scenes/assets/tg.mp3"
      },
      {
        "name": "tpw",
        "url": "./scenes/assets/tpw.mp3"
      }
    ],
    "$init": [
      {
        "dialog-box": true,
        "status-bar": true,
        "next": true
      },
      {
        "$": "Мороз и солнце; день чудесный!",
        "clipboard": "test.js"
      },
      {
        "$": "Еще ты дремлешь, друг прелестный"
      },
      {
        "$": "Пора, красавица, проснись",
        "clipboard": "app.lua"
      },
      {
        "$": "Открой сомкнуты негой взоры"
      },
      {
        "$": "Навстречу северной Авроры",
        "clipboard": "Привет Мир!"
      },
      {
        "jump": "$init"
      }
    ],
    "characters": [
      {
        "id": "$",
        "name": ". . . .",
        "nameColor": "#49de58",
        "replyColor": "#a4deaa"
      },
      {
        "id": "kr",
        "name": "Корней",
        "nameColor": "orange",
        "replyColor": "#a4deaa"
      },
      {
        "id": "al",
        "name": "Алиса",
        "nameColor": "magenta",
        "replyColor": "crimson"
      }
    ],
    "data": {
      "a.yaml": "\"- test\\r\\n\\r\\n- aa:\\r\\n    test: 1234\\r\\n    test2: true\"",
      "app.lua": "\"\\r\\n-- Created by IntelliJ IDEA.\\r\\nrequire \\\"import\\\"\\r\\n\\r\\nlocal FileUtils = import \\\"androlua.common.LuaFileUtils\\\"\\r\\n\\r\\nimport \\\"android.support.design.widget.CoordinatorLayout\\\"\\r\\nimport \\\"android.support.v4.view.MotionEventCompat\\\"\\r\\nimport \\\"android.view.MotionEvent\\\"\\r\\nlocal uihelper = require \\\"uihelper\\\"\\r\\nlocal JSON = require \\\"cjson\\\"\\r\\n\\r\\nlocal function newInstance()\\r\\n    -- create view table\\r\\n    local layout = {\\r\\n        CoordinatorLayout,\\r\\n        layout_width = \\\"fill\\\",\\r\\n        layout_height = \\\"fill\\\",\\r\\n        focusable = true,\\r\\n        focusableInTouchMode = true,\\r\\n        {\\r\\n            LinearLayout,\\r\\n            layout_width = \\\"fill\\\",\\r\\n            layout_height = \\\"fill\\\",\\r\\n            gravity = \\\"center_horizontal\\\",\\r\\n            orientation = 1,\\r\\n            paddingLeft = \\\"16dp\\\",\\r\\n            paddingRight = \\\"16dp\\\",\\r\\n            {\\r\\n                RelativeLayout,\\r\\n                layout_height = \\\"48dp\\\",\\r\\n                layout_width = \\\"fill\\\",\\r\\n                layout_marginLeft = \\\"16dp\\\",\\r\\n                layout_marginTop = \\\"36dp\\\",\\r\\n                layout_marginRight = \\\"8dp\\\",\\r\\n                {\\r\\n                    TextView,\\r\\n                    id = \\\"tv_date\\\",\\r\\n                    text = \\\"23月33日 333\\\",\\r\\n                    textSize = \\\"14sp\\\",\\r\\n                    layout_centerVertical = true,\\r\\n                    textColor = \\\"#aa333333\\\",\\r\\n                },\\r\\n                {\\r\\n                    ImageView,\\r\\n                    id = \\\"iv_setting\\\",\\r\\n                    layout_height = \\\"48dp\\\",\\r\\n                    layout_width = \\\"48dp\\\",\\r\\n                    padding = \\\"12dp\\\",\\r\\n                    scaleType = \\\"center\\\",\\r\\n                    src = \\\"@drawable/ic_setting\\\",\\r\\n                    layout_alignParentRight = true,\\r\\n                }\\r\\n            },\\r\\n            {\\r\\n                RecyclerView,\\r\\n                id = \\\"recyclerView\\\",\\r\\n                layout_width = \\\"fill\\\",\\r\\n                layout_marginTop = \\\"16dp\\\",\\r\\n                layout_marginLeft = \\\"8dp\\\",\\r\\n                layout_marginRight = \\\"8dp\\\",\\r\\n                overScrollMode = 2,\\r\\n                fadingEdgeLength = 0,\\r\\n                verticalFadingEdgeEnabled = false,\\r\\n                horizontalFadingEdgeEnabled = false,\\r\\n            },\\r\\n        },\\r\\n    }\\r\\n    local sp = activity.getSharedPreferences(\\\"luandroid\\\", Context.MODE_PRIVATE)\\r\\n    local item_view = {\\r\\n        RelativeLayout,\\r\\n        layout_height = \\\"70dp\\\",\\r\\n        background = \\\"@drawable/layout_selector_tran\\\",\\r\\n        {\\r\\n            ImageView,\\r\\n            id = \\\"icon\\\",\\r\\n            layout_width = \\\"40dp\\\",\\r\\n            layout_height = \\\"40dp\\\",\\r\\n            layout_marginTop = \\\"6dp\\\",\\r\\n            layout_centerHorizontal = true,\\r\\n        },\\r\\n        {\\r\\n            TextView,\\r\\n            id = \\\"text\\\",\\r\\n            layout_below = \\\"icon\\\",\\r\\n            textColor = \\\"#444444\\\",\\r\\n            textSize = \\\"9sp\\\",\\r\\n            gravity = \\\"center\\\",\\r\\n            layout_width = \\\"fill\\\",\\r\\n            layout_height = \\\"22dp\\\",\\r\\n        },\\r\\n        {\\r\\n            ImageView,\\r\\n            layout_alignParentRight = true,\\r\\n            id = \\\"ic_del\\\",\\r\\n            layout_marginRight = \\\"2dp\\\",\\r\\n            layout_width = \\\"24dp\\\",\\r\\n            layout_height = \\\"24dp\\\",\\r\\n            src = \\\"@drawable/ic_clear\\\",\\r\\n            visibility = 'gone',\\r\\n        },\\r\\n    }\\r\\n    local hadLoadData\\r\\n    local isVisible\\r\\n    local lastId\\r\\n    local data = {}\\r\\n    local ids = {}\\r\\n    local config = {}\\r\\n    local isDragging = false\\r\\n    local weeks = { \\\"星期日\\\", \\\"星期一\\\", \\\"星期二\\\", \\\"星期三\\\", \\\"星期四\\\", \\\"星期五\\\", \\\"星期六\\\" }\\r\\n    local adapter\\r\\n    local touchHelper\\r\\n    local gd = GradientDrawable()\\r\\n    gd.setShape(GradientDrawable.OVAL)\\r\\n    gd.setColor(0xFFFFFFFF)\\r\\n\\r\\n    local function newActivity(luaPath)\\r\\n        local intent = Intent(activity, LuaActivity)\\r\\n        intent.putExtra(\\\"luaPath\\\", luaPath)\\r\\n        activity.startActivity(intent)\\r\\n    end\\r\\n\\r\\n    local function saveConfig(config)\\r\\n        sp.edit().putString(\\\"config\\\", JSON.encode(config)).apply()\\r\\n    end\\r\\n\\r\\n    local function getAdapter(mData, changeColor, getItemCountFunc, getTouchHelperFunc)\\r\\n        return LuaRecyclerAdapter(luajava.createProxy('androlua.adapter.LuaRecyclerAdapter$AdapterCreator', {\\r\\n            getItemCount = getItemCountFunc,\\r\\n            getItemViewType = function(position) return 0 end,\\r\\n            onCreateViewHolder = function(parent, viewType)\\r\\n                local views = {}\\r\\n                local holder = LuaRecyclerHolder(loadlayout(item_view, views, RecyclerView))\\r\\n                holder.itemView.setTag(views)\\r\\n                holder.itemView.getLayoutParams().width = ids.recyclerView.getWidth() / 5 - 1\\r\\n                holder.itemView.setOnTouchListener(luajava.createProxy('android.view.View$OnTouchListener', {\\r\\n                    onTouch = function(v, event)\\r\\n                        if isDragging and MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN then\\r\\n                            getTouchHelperFunc().startDrag(holder)\\r\\n                        end\\r\\n                        return false\\r\\n                    end\\r\\n                }))\\r\\n                holder.itemView.setOnLongClickListener(luajava.createProxy('android.view.View$OnLongClickListener', {\\r\\n                    onLongClick = function(v)\\r\\n                        isDragging = true\\r\\n                        adapter.notifyDataSetChanged()\\r\\n                        return true\\r\\n                    end\\r\\n                }))\\r\\n                holder.itemView.onClick = function()\\r\\n                    local p = holder.getAdapterPosition() + 1\\r\\n                    local item = mData[p]\\r\\n                    newActivity(item.launchPage)\\r\\n                end\\r\\n                views.ic_del.onClick = function()\\r\\n                    local p = holder.getAdapterPosition()\\r\\n                    local id\\r\\n                    if p + 1 <= #data then\\r\\n                        id = data[p + 1].id\\r\\n                        table.remove(data, p + 1)\\r\\n                        adapter.notifyItemRemoved(p)\\r\\n                    end\\r\\n                    if id then FileUtils.removePlugin(id) end\\r\\n                end\\r\\n                return holder\\r\\n            end,\\r\\n            onBindViewHolder = function(holder, position)\\r\\n                position = position + 1\\r\\n                local views = holder.itemView.getTag()\\r\\n                local item = mData[position]\\r\\n                if views == nil or item == nil then return end\\r\\n                if isDragging then\\r\\n                    views.ic_del.setScaleX(0)\\r\\n                    views.ic_del.setScaleY(0)\\r\\n                    views.ic_del.setVisibility(0)\\r\\n                    views.ic_del.animate().scaleX(1).scaleY(1).start()\\r\\n                else\\r\\n                    views.ic_del.setVisibility(8)\\r\\n                end\\r\\n\\r\\n                local icon = item.icon\\r\\n                local radius = tonumber(config.home_icon_radius or '40')\\r\\n                LuaImageLoader.loadWithRadius(views.icon, radius, icon)\\r\\n                views.text.setText(item.text)\\r\\n                local alpha = tonumber(config.home_bg_alpha or 9)\\r\\n                if changeColor and alpha <= 5 then\\r\\n                    views.text.setTextColor(0xFFFFFFFF)\\r\\n                else\\r\\n                    views.text.setTextColor(0xFF444444)\\r\\n                end\\r\\n            end,\\r\\n        }))\\r\\n    end\\r\\n\\r\\n    local function getTouchHelperCallback(mData, mAdapter)\\r\\n        return DragTouchHelper(luajava.createProxy('pub.hanks.sample.adapter.DragTouchHelper$Creator', {\\r\\n            onMove = function(rec, holder, target)\\r\\n                local fromPosition = holder.getAdapterPosition() + 1\\r\\n                local toPosition = target.getAdapterPosition() + 1\\r\\n                local tmp = mData[fromPosition]\\r\\n                table.remove(mData, fromPosition)\\r\\n                table.insert(mData, toPosition, tmp)\\r\\n                mAdapter.notifyItemMoved(fromPosition - 1, toPosition - 1)\\r\\n            end,\\r\\n            isLongPressDragEnabled = function() return false end,\\r\\n            clearView = function(rec, holder)\\r\\n                local sortApps = {}\\r\\n                for i = 1, #mData do\\r\\n                    sortApps[#sortApps + 1] = mData[i].id\\r\\n                end\\r\\n                config.sortApps = sortApps\\r\\n                saveConfig(config)\\r\\n            end,\\r\\n            getDragFlags = function() return 0xF end,\\r\\n            getSwipeFlags = function() return 0 end,\\r\\n        }))\\r\\n    end\\r\\n\\r\\n    local function getData()\\r\\n        for k, v in pairs(data) do\\r\\n            data[k] = nil\\r\\n        end\\r\\n        config = JSON.decode(sp.getString('config', '{}'))\\r\\n        local sortApps = config.sortApps or {}\\r\\n        local localList = LuaFileUtils.getPluginList()\\r\\n        for i = 1, #localList do\\r\\n            local p = localList[i - 1]\\r\\n            local item = {\\r\\n                id = p.getId(),\\r\\n                text = p.getName(),\\r\\n                launchPage = p.getMainPath(),\\r\\n                icon = p.getIconPath(),\\r\\n                position = 9999 + i,\\r\\n            }\\r\\n            data[#data + 1] = item\\r\\n            for j = 1, #sortApps do\\r\\n                if sortApps[j] == item.id then\\r\\n                    item.position = j\\r\\n                end\\r\\n            end\\r\\n        end\\r\\n        -- sort\\r\\n        table.sort(data, function(l, r) return l.position < r.position end)\\r\\n        adapter.notifyDataSetChanged()\\r\\n\\r\\n        -- save new config\\r\\n        local newSortApps = {}\\r\\n        for i = 1, #data do\\r\\n            newSortApps[#newSortApps + 1] = data[i].id\\r\\n        end\\r\\n        config.sortApps = newSortApps\\r\\n        saveConfig(config)\\r\\n    end\\r\\n\\r\\n    local function isDraggingIcons()\\r\\n        return isDragging\\r\\n    end\\r\\n\\r\\n    local function setDraggingIcons(drag)\\r\\n        isDragging = drag\\r\\n    end\\r\\n\\r\\n    adapter = getAdapter(data, true, function() return #data end, function() return touchHelper end)\\r\\n    local fragment = LuaFragment.newInstance()\\r\\n    fragment.setCreator(luajava.createProxy('androlua.LuaFragment$FragmentCreator', {\\r\\n        onCreateView = function(inflater, container, savedInstanceState)\\r\\n            return loadlayout(layout, ids)\\r\\n        end,\\r\\n        onViewCreated = function(view, savedInstanceState)\\r\\n            ids.recyclerView.setLayoutManager(GridLayoutManager(activity, 5))\\r\\n            ids.recyclerView.setAdapter(adapter)\\r\\n            touchHelper = ItemTouchHelper(getTouchHelperCallback(data, adapter))\\r\\n            touchHelper.attachToRecyclerView(ids.recyclerView)\\r\\n\\r\\n            ids.tv_date.setText(os.date('%m月%d日 ') .. weeks[os.date('%w') + 1])\\r\\n            ids.iv_setting.onClick = function(view)\\r\\n                newActivity(luajava.luadir .. '/activity_setting.lua')\\r\\n            end\\r\\n\\r\\n            getData()\\r\\n        end,\\r\\n    }))\\r\\n    return fragment, adapter, getData, isDraggingIcons, setDraggingIcons\\r\\nend\\r\\n\\r\\nreturn {\\r\\n    newInstance = newInstance\\r\\n}\\r\\n\"",
      "style.css": "\".status-bar{\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  background: rgba(0,0,0,0.7);\\r\\n  color: gray;\\r\\n  width: 100%;\\r\\n  height: 4%;\\r\\n  z-index: 9999;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  padding: 5px 15px;\\r\\n  display: none;\\r\\n}\\r\\n.status-bar__status--ready,\\r\\n.status-bar__status--help{\\r\\n  display: inline-flex;\\r\\n  align-items: center;\\r\\n  cursor: pointer;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n.status-bar__status--ready span{\\r\\n  width: 15px;\\r\\n  height: 15px;\\r\\n  border-radius: 50%;\\r\\n  background-color: gray;\\r\\n  display: inline-block;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.status-bar__status--help span{\\r\\n  width: 15px;\\r\\n  height: 15px;\\r\\n  border-radius: 50%;\\r\\n  background-color: gray;\\r\\n  display: i gray;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.status-bar__status--ready.status-active span{\\r\\n    background-color: lightgreen;\\r\\n}\\r\\n.status-bar__status--ready.status-active {\\r\\n   color: white;\\r\\n}\\r\\n.status-bar__status--help.status-active span{\\r\\n    background-color: red;\\r\\n}\\r\\n.status-bar__status--help.status-active{\\r\\n  color: white;\\r\\n}\\r\\n/*\\r\\n.status-bar__item:hover{\\r\\n  color: white;\\r\\n}\\r\\n.status-bar__status--ready:hover span{\\r\\n    background-color: lightgreen;\\r\\n}\\r\\n.status-bar__status--help:hover span{\\r\\n    background-color: red;\\r\\n}\\r\\n*/\\r\\n\\r\\n.status-bar__image-containter{\\r\\n  position: absolute;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: contain;\\r\\n  top: 40px;\\r\\n  right: 0;\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n}\\r\\n.status-bar__player-name{\\r\\n  padding-left: 10px;\\r\\n}\\r\\n.status-bar__player{\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\"",
      "t.py": "\"class Person:\\r\\n  def __init__(mysillyobject, name, age):\\r\\n    mysillyobject.name = name\\r\\n    mysillyobject.age = age\\r\\n\\r\\n  def myfunc(abc):\\r\\n    print(\\\"Hello my name is \\\" + abc.name)\\r\\n\\r\\np1 = Person(\\\"John\\\", 36)\\r\\np1.myfunc()\"",
      "test.js": "\"\\r\\nvar express = require('express');\\r\\nvar app = express();\\r\\n\\r\\nvar requestTime = function (req, res, next) {\\r\\n  req.requestTime = Date.now();\\r\\n  next();\\r\\n};\\r\\n\\r\\napp.use(requestTime);\\r\\n\\r\\napp.get('/', function (req, res) {\\r\\n  var responseText = 'Hello World!';\\r\\n  responseText += 'Requested at: ' + req.requestTime + '';\\r\\n  res.send(responseText);\\r\\n});\\r\\n\\r\\napp.listen(3000);\\r\\n\\r\\n\""
    },
    "package": {
      "preload": false,
      "debug": false,
      "chess": false,
      "paint-board": false,
      "crossword": false
    },
    "wiki": {
      "Абажур": "Колпак для лампы, светильника",
      "Баба-яга": "В русских сказках: злая старуха-колдунья",
      "Вагонетка": {
        "text": "Небольшой открытый вагон для перевозки грузов на узкоколейных или подвесных дорогах",
        "color": "lightgreen"
      },
      "Жабры": "Органы дыхания рыб и некоторых других водных животных",
      "Пагинация": "Нумерация страниц",
      "Хакасы": "Народ, составляющий основное коренное население Хакасии",
      "Юань": {
        "text": "Денежная единица в Китае",
        "color": "red"
      },
      "Явка": "Место, где происходят конспиративные встречи, а также сама такая встреча или условный знак при такой встрече"
    }
  }
}